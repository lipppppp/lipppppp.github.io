---
layout: post
title: Java Native Interface示例
date: '2020-08-04 19:15'
author: Eric Yin
catalog: 'true'
tags:
  - Java
---

## 创建Java类

创建一个Java类获取系统配置/etc/security/limit.conf中的memlock大小，需要使用C方法获取该值，因此要用到JNI接口来帮助Java类实现该功能。创建类GetMemlock，使用静态域方法加载本地库，库名可设置为动态链接库so文件的名称。具体获取方式使用native关键字声明方法，类代码如下所示。

```java
public class GetMemlock {
    static {
        System.loadLibrary("GetMemlock");
    }

    public static native void getSize();

    public static void main(String[] args) {
        getSize();
    }
}
```

## 编译
编译类为class文件
```shell
javac GetMemlock.java
```

## 生成头文件
要为以上定义的类生成Java本地接口头文件，需使用javah，Java编译器的javah功能将根据类生成必要的声明。
```shell
javah -cp . -jni GetMemlock
```
生成的头文件如下所示
```c

/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class GetMemlock */

#ifndef _Included_GetMemlock
#define _Included_GetMemlock
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     GetMemlock
 * Method:    getSize
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_GetMemlock_getSize
  (JNIEnv *, jclass);

#ifdef __cplusplus
}
#endif
#endif
```

## 创建C文件
根据头文件创建具体功能实现逻辑，需要将刚生成的头文件加入include中。在本样例中，获取memlock值还需要添加sys/resource.h。
```c
#include <stdio.h>
#include "GetMemlock.h"
#include <sys/resource.h>
#include <errno.h>

JNIEXPORT void JNICALL Java_GetMemlock_getSize(JNIEnv *env, jclass clazz){
 #ifdef RLIMIT_MEMLOCK
   struct rlimit rlim;
   int rc = getrlimit(RLIMIT_MEMLOCK, &rlim);
   if (rc != 0) {
     throw_ioe(env, errno);
   }
   rlim_t size = (rlim.rlim_cur == RLIM_INFINITY) ? 2147483647 : rlim.rlim_cur;
   printf("RLIMIT_MEMLOCK size is %lu\n", size);
 #else
   printf("Not Defined\n");
 #endif
}
```

## 编译动态链接库
根据创建的C文件编译生成动态链接库，-I后面的是java的include文件夹的地址，请根据具体的java版本以及安装路径作相应的改变。-f后面的PIC表示生成的库中符号是与位置无关的。-shared表示共享，共享库后缀名为.so。
```shell
gcc -fPIC -I /usr/jdk64/java/include -I /usr/jdk64/java/include/linux -shared -o libGetMemlock.so GetMemlock.c
```

## 运行样例
在/etc/security/limit.conf中设置`hdfs - memlock 104857600`，即指定hdfs用户的memlcok大小（单位KB）。通过运行java类应可获取该值大小，首先切换至hdfs用户，运行指令如下。
```shell
java -cp . -Djava.library.path=. GetMemlock
```
结果为`RLIMIT_MEMLOCK size is 107374182400`，获取值单位为Byte。切换为root用户，结果为`RLIMIT_MEMLOCK size is 65536`，说明配置生效。

