---
layout: post
title: Shell Scripts基础
date: '2020-03-30 14:01'
author: Eric Yin
catalog: 'true'
tags:
  - Linux
---

## 基本规则
- 指令的执行是从上而下、从左而右的分析与执行；
- 指令、选项与参数间的多个空白都会被忽略掉；
- 空白行也将被忽略掉，tab按键的空白同样视为空格键；
- 如果读取到一个Enter符号，就开始执行该行指令；
- 至于如果一行的内容太多，可以使用`\`来延伸至下一行；
- `#`作为批注
- 第一行`#!/bin/bash`来宣告该script使用的shell名称

## shell变量
变量名的命名规则：
- 命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。
- 中间不能有空格，可以使用下划线（_）。
- 不能使用标点符号。
- 不能使用bash里的关键字（可用help命令查看保留关键字）。

使用变量时只要在变量名前加$符号即可，变量名外的花括号是可选的。

## 数值运算
bash shell仅支持整数的数值运算，命令如下：
```shell
var=$((运算内容))
```

## 常用判断
判断符号`[]`，注意：
- 在中括号内的每个组件都需要有空格键来分隔；
- 在中括号内的变数，最好都以双引号括号起来；
- 在中括号内的常数，最好都以单或双引号括起来。

**文件类型**
|操作符|说明|
|-|-|
|-e|该文件是否存在|
|-f|该文件是否存在且为文件file|
|-d|该文件名是否存在且为目录directory|
|-b|该文件是否存在且为一个block device装置|
|-c|该文件是否存在且为一个character device装置|
|-S|该文件是否存在且为一个Socket档案|
|-p|该文件是否存在且为一个FIFO（pipe）档案|
|-L|该文件是否存在且为一个连结档|

**权限侦测**
|操作符|说明|
|-|-|
|-r|检测文件是否存在且具有可读权限|
|-w|检测文件是否存在且具有可写权限|
|-x|检测文件是否存在且具有可执行权限|
|-u|检测文件是否存在且具有SUID的属性|
|-g|检测文件是否存在且具有SGID的属性|
|-k|检测文件是否存在且具有Sticky bit的属性|
|-s|检测文件是否存在且为非空白文件|

**文件之间的比较**
例如`test file1 -nt file2`
|操作符|说明|
|-|-|
|-nt|判断file1是否比file2新|
|-ot|判断file1是否比file2旧|
|-ef|判断file1与file2是否为同一文件，主要判断是否均指向同一个inode|

**两个整数之间的判定**
例如`test n1 -eq n2`
|操作符|说明|
|-|-|
|-eq|两数值相等|
|-ne|两数值不等|
|-gt|n1大于n2|
|-lt|n1小于n2|
|-ge|n1大于等于n2|
|-le|n1小于等于n2|

**判定字符串的数据**
|操作符|说明|
|-|-|
|test -z string|判定字符串是否为0|
|test -n string|判定字符串是否非0|
|test str1 = str2|判定str1是否等于str2|
|test str1 != str2|判定str1是否不等于str2|

**多重条件判定**
例如`test -r filename -a -x filename`
|操作符|说明|
|-|-|
|-a|and 两判断同时成立|
|-o|or 两判断任何一个成立|
|!|取反|

## 传参
|参数处理|说明|
|-|-|
|$#|传递到脚本的参数个数|
|$* |以一个单字符串显示所有向脚本传递的参数。|
|$$|脚本运行的当前进程ID号|
|$!|后台运行的最后一个进程的ID号|
|$@|	与$*相同，但是使用时加引号，并在引号中返回每个参数。|
|$-|显示Shell使用的当前选项，与set命令功能相同。|
|$?|	显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。|

\$* 与 $@ 区别：

- 相同点：都是引用所有参数。
- 不同点：只有在双引号中体现出来。假设在脚本运行时写了三个参数 1、2、3，，则 " * " 等价于 "1 2 3"（传递了一个参数），而 "@" 等价于 "1" "2" "3"（传递了三个参数）。

**shift** 等同于变量号码的偏移

## 条件判断式
### if ... then
句式：
```shell
if [条件判断式]；then
    当条件判断式成立时，可以进行的指令工作内容；
else
    当条件判断式不成立时，可以进行的指令工作内容；
fi
```

当有多个条件要判别时，可以由多个中括号来隔开，括号与括号之间，则使用`&&`或`||`来隔开。

### case ... esac
句式：
```shell
case $变量名称 in
"第一个变量内容")
    程序段
    ;;
"第二个变量内容")
    程序段
    ;;
*)
    不包含第一个变量内容与第二个变量内容的其他程序执行段
    exit 1
    ;;
esac
```

## function功能
句式：
```shell
function fname(){
    程序段
}
```

## 循环
while句式，当condition条件成立时，就进行循环，直到condition的条件不成立才停止：
```shell
while [condition]
do
    程序段落
done
```

until句式，当condition条件成立时，就终止循环，否则就持续进行循坏的程序段：
```shell
until [condition]
do
    程序段落
done
```

for句式1，已知进行几次循环：
```shell
for var in con1 con2 con3
do
    程序段
done
```

for句式2：
```shell
for (( 初始值；限制值；执行步阶))
do
    程序段
done
```

## shell script的追踪与debug
`sh [-nvx] scripts.sh`
选项与参数：
-n: 不要执行script，进查询语法的问题；
-v: 在执行script前，先将scripts的内容输出到屏幕上；
-x: 将使用到的script内容显示到屏幕上。

